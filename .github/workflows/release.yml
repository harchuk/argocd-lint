name: Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      release_name: ${{ steps.version.outputs.release_name }}
    steps:
      - name: Compute version metadata
        id: version
        run: |
          if [[ "${GITHUB_REF_TYPE:-}" == "tag" ]]; then
            version="${GITHUB_REF_NAME#v}"
            tag="${GITHUB_REF_NAME}"
            release_name="${GITHUB_REF_NAME}"
          else
            timestamp=$(date -u +%Y%m%d%H%M%S)
            short_sha=${GITHUB_SHA::7}
            version="${timestamp}-${short_sha}"
            tag="v${version}"
            release_name="Automated build ${version}"
          fi

          {
            echo "version=${version}"
            echo "tag=${tag}"
            echo "release_name=${release_name}"
          } >> "$GITHUB_OUTPUT"

  build:
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          VERSION: ${{ needs.prepare.outputs.version }}
        run: |
          mkdir -p dist
          EXT=""
          if [ "$GOOS" = "windows" ]; then
            EXT=".exe"
          fi
          OUTPUT="dist/argocd-lint-${GOOS}-${GOARCH}${EXT}"
          LDFLAGS="-X github.com/argocd-lint/argocd-lint/pkg/version.Version=${VERSION} -X github.com/argocd-lint/argocd-lint/pkg/version.GitCommit=${GITHUB_SHA} -X github.com/argocd-lint/argocd-lint/pkg/version.BuildDate=$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          go build -ldflags "$LDFLAGS" -o "$OUTPUT" ./cmd/argocd-lint

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: argocd-lint-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/argocd-lint-${{ matrix.goos }}-${{ matrix.goarch }}*

  publish:
    runs-on: ubuntu-latest
    needs:
      - prepare
      - build
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Generate checksums
        run: |
          cd dist
          find . -type f -exec sha256sum {} \; > checksums.txt

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.prepare.outputs.tag }}
          name: ${{ needs.prepare.outputs.release_name }}
          target_commitish: ${{ github.sha }}
          draft: false
          prerelease: false
          fail_on_unmatched_files: true
          body: |
            Automated release for commit ${{ github.sha }}
          files: |
            dist/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  container:
    runs-on: ubuntu-latest
    needs:
      - prepare
      - build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ghcr.io/${{ github.repository }}/argocd-lint:${{ needs.prepare.outputs.version }}
            ghcr.io/${{ github.repository }}/argocd-lint:latest
